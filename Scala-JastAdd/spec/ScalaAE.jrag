import java.util.*;
import AST.*;

/**The Available Expressions Analysis.*/
aspect AE {
	/* The kill function for available expressions. */
	syn Set<Expression> BlockCell.killAE(Set<Expression> current);
	
	eq AssignS.killAE(Set<Expression> current) {
		Set<Expression> ret = new HashSet<Expression>();
		/*The Variable will be change*/
		String assigned_var = getVarName();
		for (Expression exp : current)
		{
			if (exp.FV().containsKey(assigned_var))
			{
				/*Becauase other expressions contain this var, so the value of 
				 * current variable changed, the whole value of expression will change
				 * too, which means this expression is killed*/
				ret.add(exp);
			}
		}
		return ret;
	}
	eq VarDef.killAE(Set<Expression> current) {
		Set<Expression> ret = new HashSet<Expression>();
		String assigned_var = getVarName();
		for (Expression exp : current)
		{
			if (exp.FV().containsKey(assigned_var))
			ret.add(exp);
		}
		return ret;
	
	}
	eq VarDecl.killAE(Set<Expression> current) = new HashSet<Expression>();
	eq LExp.killAE(Set<Expression> current) = new HashSet<Expression>();
	
	/*The gen function for available expressions.*/
	syn Set<Expression> BlockCell.genAE();
	eq AssignS.genAE() {
		Set<Expression> ret = new HashSet<Expression>();
		Expression exp = getExpression();
		if (exp.nontrivial()
			&& !(exp.FV().containsKey(getVarName()))) {
			
			ret.add(exp);
		}
		return ret;
	}
	
	eq VarDef.genAE() {
		Set<Expression> ret = new HashSet<Expression>();
		Expression exp = getExpression();
		if (exp.nontrivial()) {
			ret.add(exp);
		}
		return ret;
	}
	eq VarDecl.genAE() = new HashSet<Expression>();/*null*/
	
	eq LExp.genAE() {
		Expression e = getExpression();
		if (e.nontrivial()) {
			Set<Expression> ret = new HashSet<Expression>();
			ret.add(e);
			return ret;
		} else {
			return new HashSet<Expression>();
		}
	}
	
	/*Compute the entry information for the AE analysis.*/
	syn Set<Expression> BlockCell.AEentry() circular [AexpStar()];
    eq BlockCell.AEentry() {
		Set<Expression> ret = new HashSet<Expression>(); 
		if (getLabelAST().equals(progInitLabel())) {
			ret = new HashSet<Expression>();
		} else {
		
			Set<Set<Expression>> inputs = SetRepUtility.map(
				new SetRepUtility.Fun<NumLabel, Set<Expression>>() {
					public Set<Expression> run(NumLabel l) {
						BlockCell b = l.itsBlockCell();
						return b.AEexit();
					}
				}, 
				inFlows());
			ret = SetRepUtility.intersect(inputs);
		}
		return ret;
	}
    
	/*Compute the exit information for the AE analysis.*/
	syn Set<Expression> BlockCell.AEexit() circular [AexpStar()];
	eq BlockCell.AEexit() {
		Set<Expression> ret = new HashSet<Expression>();
		ret.addAll(this.AEentry());
		ret.removeAll(this.killAE(ret));
		ret.addAll(this.genAE());		
		return ret;
	}
	
	
	/**Print the entry and exit information*/
	public void BlockCell.printAE(StringBuilder sb, int t){
		NumLabel l = getLabelAST();
		sb.append("\n").append(getIndent(t)).append("AEentry("+l.getNum()+"): ");
		Object[] tmp = this.AEentry().toArray();
		for(int i=0;i<tmp.length;i++)
		{
			Expression res = (Expression)tmp[i];
			sb.append("("+res.unParse()+") ");
			
		}
		
		sb.append(" ").append("AEexit("+l.getNum()+"): ");
		tmp = this.AEexit().toArray();
		for(int i=0;i<tmp.length;i++)
		{
			Expression res = (Expression)tmp[i];
			sb.append("("+res.unParse()+") ");
		}
			
	}
		
}